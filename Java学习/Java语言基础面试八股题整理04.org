#+title:Java语言基础面试八股题整理04
#+date:2019-03-24
#+email:anbgsl1110@gmail.com
#+keywords: 复习系列 Java 语言基础  jiayonghliang
#+description:算法设计技巧
#+options: toc:2 html-postamble:nil
#+html_head: <link rel="stylesheet" href="http://www.jiayongliang.cn/css/org5.css" type="text/css" /><div id="main-menu-index"></div><script src="http://www.jiayongliang.cn/js/add-main-menu.js" type="text/javascript"></script>
* 多线程应用
java程序上的一切都是多线程。每当使用Java命令处理java程序就相当于启动了一个进程，所以这个时候的主方法就相当于一个线程。

多线程的最大特征是将一个进程进行继续的拆分，例如：Tomcat是一个进程，那么Tomcat里面会把每一个连接上它的用户作为一个线程存在。

多线程之中最为头疼的部分就是在于同步数据处理。
* 动态和静态
EL工作在服务端，而JSON操作在客户端处理（服务端生成）。

当使用Jsp处理的时候，必须明确所有的代码是由容器负责生成，生成的是HTML代码，这些代码通过一些对象来进行生成，生成完成之后才会把生成的代码发送给客户端。客户端进行整体的解析和处理。

JSON只是一个传输格式。它要求在整个处理里面需要通过前台的JS来进行数据的控制。
* 对象引用
在Java之中对于内存关系实际上有两块内容: 内容分配、垃圾回收。

从JDK1.2开始实际上就提出有四种引用关系：强引用、软引用、弱引用、虚引用。
1. 强引用：对象将一直被进行引用，即使出现了“OutOfMemoryError”错误信息。
2. 软引用：对象将尽可能长时间的保存，一直到出现内存不足的情况下才会被回收，也就是说对象会尽可能的保存的时间长。所以这样的操作常常将其用在缓存的开发上，例如，在MyBatis里面就提供有对于软引用模式的缓存模式。实现起来要使用特定的类：SoftReference<Object>。
3. 弱引用：一旦有了垃圾收集操作之后就会进行回收。实现起来也需要特定的类：WeakHashMap<String, Object>。
4. 虚引用（幽灵引用）：这种操作返回的内容永远都是null，就是不引用；特定的类：ReferenceQueue<Object>、PhantomReference<Object>。在对象的垃圾收集前一定会调用finalze()方法，但是如果说finalize()又占着其它的强引用的对象不放，那么就会出现一个逻辑上的死锁，所以这个时候可以通过虚引用来解决。
* 多对多关系
两个一对多的关系就可以变为多对多的关系，例如一个人可以借多本书，一本书可以被多个人借。
* 多线程工具类
在实际的开发之中多线程的同步处理最初提供的是一个synchronized关键字，这个关键字可以实现多个线程访问同一资源的同步处理，但是直接采用这样的类负责操作，整体的难度是很高的，这样为了解决同步的问题，在JDK1.5之后引入了一个：java.util.concurrent开发包，这个开发包的目的主要是为了解决多线程的实现工具类问题。

可以把这个开发包之中所有的程序类简单的理解为线程的工具类，线程的工具类里面就提供有一些线程的支持方法。
* 反射参数
在构造方法里面进行调用的时候为什么要使用“类.class”，而不使用“对象.getClass()”。

Class实际上主要表示一个类的结构，例如：Date有Class类、String也有与之匹配的Class类，而获得了Class就相当于获得了类的操作权限，哪怕获得的时候没有实例化对象存在，这个时候也可以操作的。

一般使用getClass()方法的时候都会在某个方法里面需要通过反射获取对象结构的是时候使用。
* 反射与new
对于反射机制而言，本质上的目的：避免具体的对象操作，而new处理是需要明确的耦合性。
* 各种IO
进行图形的用户信息输入的时候，如果用户不输入信息，则程序就进入到一种阻塞状态，那么这种阻塞的状态一定要在输入完成后才会解除，这就是同步IO。所谓的异步IO简单一点来讲在阻塞的时候其它的线程依然可以执行。
- BIO：同步阻塞IO，就是传统的操作实现模式，就是传统的IO处理，像最基础的InputStream
- NIO：异步阻塞IO，做一个零拷贝操作，正常的文件操作是通过CPU向内存要数据，而后内存向硬盘要数据，而零阻塞指的是内存直接将读取到的数据发送给客户端，中间不再经过CPU处理，里面重要的是一个Channel
- AIO：异步非阻塞IO，发出等待之后用户就继续向下执行了，完成后获得一个通知
* 范型通配符问题
范型可以设置所有的类型，对于范型的应用除了可以在自定义类上使用，可能使用最多的环境就是反射机制上，例如工厂设计模式。

“T”一般用于在范型类型的申明上，“?”永远在方法的接收参数，或者返回类型上。
* 范型中“T”与“？”的区别
对于这两种操作大不部分情况下我们是不进行比较的，因为两者的使用环境不同，在大部分情况习惯如果要进行方法的参数接收会考虑使用“?”，它的特点是可以保证程序不出现不必要的修改。

“<T>”也可以用在方法上，那么这个时候就表示这个T应该是一个具体的类型（类型、接口）。如果该类型不存在则无法使用。使用“类<?>”表示只能够取得内容，但不允许设置内容。